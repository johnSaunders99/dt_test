##数据库配置
spring:
  dynamic:
    primary: downtime #设置默认的数据源或者数据源组,默认值即为master
    strict: false #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候回抛出异常,不启动会使用默认数据源.
    datasource:
      device:
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://${DEVICE_MYSQL_HOST:10.21.1.4}:${DEVICE_MYSQL_PORT:3306}/${DEVICE_MYSQL_DATABASE:kq_device}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=true&verifyServerCertificate=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true
        username: ${DEVICE_MYSQL_USERNAME:root}
        password: ${DEVICE_MYSQL_PASSWORD:sunrunvas}
        type: com.alibaba.druid.pool.DruidDataSource
        flyway: ${DEVICE_FLYWAY_ENABLE:true}
      downtime:
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://${DOWNTIME_MYSQL_HOST:10.21.1.4}:${DOWNTIME_MYSQL_PORT:3306}/${DOWNTIME_MYSQL_DATABASE:dt_downtime}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=true&verifyServerCertificate=false&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true
        username: ${DOWNTIME_MYSQL_USERNAME:root}
        password: ${DOWNTIME_MYSQL_PASSWORD:sunrunvas}
        type: com.alibaba.druid.pool.DruidDataSource
        flyway: ${DOWNTIME_FLYWAY_ENABLE:false}
#  datasource:
#    # clickhouse配置
#    click:
#    # 数据源选择
#      type: com.alibaba.druid.pool.DruidDataSource
#      driverClassName: ru.yandex.clickhouse.ClickHouseDriver
#      url: jdbc:clickhouse://${CLICK_HOUSE_HOST:192.168.1.120}:${CLICK_HOUSE_PORT:18123}/${CLICK_HOUSE_DATABASE:kq_attendance_record}
#      username: ${CLICK_HOUSE_USERNAME:root}
#      password: ${CLICK_HOUSE_PASSWORD:sunrunvas}
#      initialSize: 10
#      maxActive: 100
#      minIdle: 10
#      maxWait: 6000
  flyway:
    # 是否启用flyway
    enabled: ${FLYWAY_ENABLE:false}
    # 编码格式，默认UTF-8
    encoding: UTF-8
    # 迁移sql脚本文件存放路径，默认db/migration
    locations: classpath:db/
    # 迁移sql脚本文件名称的前缀，默认V
    sql-migration-prefix: V
    # 迁移sql脚本文件名称的分隔符，默认2个下划线__
    sql-migration-separator: __
    # 迁移sql脚本文件名称的后缀
    sql-migration-suffixes: .sql
    # 迁移时是否进行校验，默认true
    validate-on-migrate: true
    # 当迁移发现数据库非空且存在没有元数据的表时，自动执行基准迁移，新建schema_version表
    baseline-on-migrate: ${BASE_LINE_ENABLE:false}
    baseline-version: ${BASE_LINE_VERSION:1}
  redis:
    enabled: true
    # r服务器地址
    host: ${REDIS_HOST:192.168.1.120} # 服务器端口
    port: ${REDIS_PORT:6379}
    # 数据库索引（默认0）
    database: 0
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 50
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 3000ms
        # 连接池中的最大空闲连接数
        max-idle: 20
        # 连接池中的最小空闲连接数
        min-idle: 2
    # 连接超时时间（毫秒）
    timeout: 5000ms

# MyBatisPlus配置
# https://baomidou.com/config/
mybatis-plus:
  mapper-packages: cn.gzsunrun.downtime.mapper.**
  # 对应的 XML 文件位置
  mapper-locations: classpath:mapper/*.xml
  # 实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: cn.gzsunrun.downtime.entity
  # 针对 typeAliasesPackage，如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象
  #typeAliasesSuperType: Class<?>
  # 如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler
  #typeHandlersPackage: null
  # 如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性
  #typeEnumsPackage: null
  # 启动时是否检查 MyBatis XML 文件的存在，默认不检查
  checkConfigLocation: false
  # 通过该属性可指定 MyBatis 的执行器，MyBatis 的执行器总共有三种：
  # SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）
  # REUSE：该执行器类型会复用预处理语句（PreparedStatement）
  # BATCH：该执行器类型会批量执行所有的更新语句
  executorType: SIMPLE
  # 指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署
  configurationProperties: null
  configuration:
    # 自动驼峰命名规则（camel case）映射
    # 如果您的数据库命名符合规则无需使用 @TableField 注解指定数据库字段名
    mapUnderscoreToCamelCase: true
    # 默认枚举处理类,如果配置了该属性,枚举将统一使用指定处理器进行处理
    # org.apache.ibatis.type.EnumTypeHandler : 存储枚举的名称
    # org.apache.ibatis.type.EnumOrdinalTypeHandler : 存储枚举的索引
    # com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler : 枚举类需要实现IEnum接口或字段标记@EnumValue注解.
    defaultEnumTypeHandler: org.apache.ibatis.type.EnumTypeHandler
    # 当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。
    aggressiveLazyLoading: true
    # MyBatis 自动映射策略
    # NONE：不启用自动映射
    # PARTIAL：只对非嵌套的 resultMap 进行自动映射
    # FULL：对所有的 resultMap 都进行自动映射
    autoMappingBehavior: PARTIAL
    # MyBatis 自动映射时未知列或未知属性处理策
    # NONE：不做任何处理 (默认值)
    # WARNING：以日志的形式打印相关警告信息
    # FAILING：当作映射失败处理，并抛出异常和详细信息
    autoMappingUnknownColumnBehavior: NONE
    # Mybatis一级缓存，默认为 SESSION
    # SESSION session级别缓存，同一个session相同查询语句不会再次查询数据库
    # STATEMENT 关闭一级缓存
    localCacheScope: SESSION
    # 开启Mybatis二级缓存，默认为 true
    cacheEnabled: true
  global-config:
    # 是否打印 Logo banner
    banner: true
    # 是否初始化 SqlRunner
    enableSqlRunner: false

    dbConfig:
      # 主键类型
      # AUTO 数据库ID自增
      # NONE 空
      # INPUT 用户输入ID
      # ASSIGN_ID 全局唯一ID
      # ASSIGN_UUID 全局唯一ID UUID
      idType: AUTO
      # 表名前缀
      tablePrefix: null
      # 字段 format,例: %s,(对主键无效)
      columnFormat: null
      # 表名是否使用驼峰转下划线命名,只对表名生效
      tableUnderline: true
      # 大写命名,对表名和字段名均生效
      capitalMode: false
      # 全局的entity的逻辑删除字段属性名
      logicDeleteField: null
      # 逻辑已删除值
      logicDeleteValue: 2
      # 逻辑未删除值
      logicNotDeleteValue: 0
      # 字段验证策略之 insert,在 insert 的时候的字段验证策略
      # IGNORED 忽略判断
      # NOT_NULL 非NULL判断
      # NOT_EMPTY 非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)
      # DEFAULT 默认的,一般只用于注解里
      # NEVER 不加入 SQL
      insertStrategy: NOT_EMPTY
      # 字段验证策略之 update,在 update 的时候的字段验证策略
      updateStrategy: NOT_EMPTY
